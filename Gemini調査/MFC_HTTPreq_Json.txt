// MultipartFormDlg.h: ヘッダー ファイル
// (実際のMFCプロジェクトでは、適切なヘッダーファイルに含めてください)

#pragma once
#include <afxinet.h> // CInternetSession, CHttpConnection, CHttpFile のために必要
#include "json.hpp"  // nlohmann/json ライブラリをインクルード

// CMultipartFormDlg ダイアログ
class CMultipartFormDlg : public CDialogEx
{
// 構築
public:
    CMultipartFormDlg(CWnd* pParent = nullptr); // 標準コンストラクター

// ダイアログ データ
#ifdef AFX_DESIGN_TIME
    enum { IDD = IDD_MULTIPARTFORM_DIALOG }; // ダイアログのリソースID (適宜変更)
#endif

protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV サポート

// 実装
protected:
    HICON m_hIcon;

    // 生成されたメッセージ割り当て関数
    virtual BOOL OnInitDialog();
    afx_msg void OnPaint();
    afx_msg HCURSOR OnQueryDragIcon();
    DECLARE_MESSAGE_MAP()

    // ユーザーインターフェースコントロール
    CEdit m_editServerUrl;
    CEdit m_editFilePath;
    CButton m_buttonBrowse;
    CButton m_buttonSend;
    CEdit m_editResponse;

public:
    afx_msg void OnBnClickedButtonBrowse();
    afx_msg void OnBnClickedButtonSend();

private:
    // ヘルパー関数: ユニークなboundary文字列を生成
    CString GenerateMultipartBoundary();
};

// MultipartFormDlg.cpp: 実装ファイル
// (実際のMFCプロジェクトでは、適切なCPPファイルに含めてください)

#include "pch.h" // プリコンパイル済みヘッダー (VSプロジェクトの設定による)
#include "MultipartFormDlg.h" // 自身のヘッダー
#include "afxdialogex.h"

// ダイアログのリソースID (VC++リソースエディタで作成したものと一致させる必要があります)
// 例: #define IDD_MULTIPARTFORM_DIALOG        102

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// CMultipartFormDlg ダイアログ

CMultipartFormDlg::CMultipartFormDlg(CWnd* pParent /*=nullptr*/)
    : CDialogEx(IDD_MULTIPARTFORM_DIALOG, pParent)
{
    m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME); // アプリケーションのアイコン (適宜変更)
}

void CMultipartFormDlg::DoDataExchange(CDataExchange* pDX)
{
    CDialogEx::DoDataExchange(pDX);
    DDX_Control(pDX, IDC_EDIT_SERVER_URL, m_editServerUrl); // サーバーURL入力ボックス
    DDX_Control(pDX, IDC_EDIT_FILE_PATH, m_editFilePath);   // ファイルパス入力ボックス
    DDX_Control(pDX, IDC_BUTTON_BROWSE, m_buttonBrowse);     // 参照ボタン
    DDX_Control(pDX, IDC_BUTTON_SEND, m_buttonSend);         // 送信ボタン
    DDX_Control(pDX, IDC_EDIT_RESPONSE, m_editResponse);     // レスポンス表示ボックス
}

BEGIN_MESSAGE_MAP(CMultipartFormDlg, CDialogEx)
    ON_WM_PAINT()
    ON_WM_QUERYDRAGICON()
    ON_BN_CLICKED(IDC_BUTTON_BROWSE, &CMultipartFormDlg::OnBnClickedButtonBrowse)
    ON_BN_CLICKED(IDC_BUTTON_SEND, &CMultipartFormDlg::OnBnClickedButtonSend)
END_MESSAGE_MAP()

// CMultipartFormDlg メッセージ ハンドラー

BOOL CMultipartFormDlg::OnInitDialog()
{
    CDialogEx::OnInitDialog();

    // このダイアログのアイコンを設定します。フレームワークがこの設定を自動的に行います。
    SetIcon(m_hIcon, TRUE);          // 大きいアイコンを設定
    SetIcon(m_hIcon, FALSE);         // 小さいアイコンを設定

    // 初期値の設定
    m_editServerUrl.SetWindowText(_T("http://localhost/upload.php")); // 適宜変更
    m_editFilePath.SetWindowText(_T("C:\\test_file.txt")); // 適宜変更 (存在しない場合は作成してください)
    m_editResponse.SetLimitText(0); // 無制限 (スクロール可能に)

    // nlohmann/json の rand() に必要なシード
    srand(static_cast<unsigned int>(GetTickCount()));

    return TRUE;  // フォーカスをコントロールに設定しない限り、TRUE を返します
}

// ダイアログに最小化ボタンを追加する場合、アイコンを描画するためのコードを以下に示します。
void CMultipartFormDlg::OnPaint()
{
    if (IsIconic())
    {
        CPaintDC dc(this); // 描画のためのデバイスコンテキスト

        SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

        // クライアントの四角形の中央にアイコンを描画します。
        int cxIcon = GetSystemMetrics(SM_CXICON);
        int cyIcon = GetSystemMetrics(SM_CYICON);
        CRect rect;
        GetClientRect(&rect);
        int x = (rect.Width() - cxIcon + 1) / 2;
        int y = (rect.Height() - cyIcon + 1) / 2;

        // アイコンを描画します。
        dc.DrawIcon(x, y, m_hIcon);
    }
    else
    {
        CDialogEx::OnPaint();
    }
}

// ユーザーが最小化したウィンドウをドラッグしているときにシステムがこの関数を呼び出します。
// これにより、カーソルが表示されます。
HCURSOR CMultipartFormDlg::OnQueryDragIcon()
{
    return static_cast<HCURSOR>(m_hIcon);
}

// ファイル参照ボタンがクリックされた時の処理
void CMultipartFormDlg::OnBnClickedButtonBrowse()
{
    CFileDialog fileDlg(TRUE, NULL, NULL, OFN_FILEMUSTEXIST | OFN_HIDEREADONLY,
                        _T("All Files (*.*)|*.*||"), this);

    if (fileDlg.DoModal() == IDOK)
    {
        m_editFilePath.SetWindowText(fileDlg.GetPathName());
    }
}

// ユニークなmultipart boundary文字列を生成するヘルパー関数
CString CMultipartFormDlg::GenerateMultipartBoundary()
{
    CString strBoundary;
    // ユニークさを確保するため、タイムスタンプとランダムな数値を組み合わせる
    strBoundary.Format(_T("---------------------------MFC_Uploader_Boundary_%lu_%lu"),
                       GetTickCount(), rand());
    return strBoundary;
}

// 送信ボタンがクリックされた時の処理
void CMultipartFormDlg::OnBnClickedButtonSend()
{
    UpdateData(TRUE); // コントロールからメンバ変数へデータを更新

    CString strServerUrl;
    m_editServerUrl.GetWindowText(strServerUrl);

    CString strFilePath;
    m_editFilePath.GetWindowText(strFilePath);

    m_editResponse.SetWindowText(_T("")); // レスポンス表示をクリア

    CInternetSession session(_T("MFC Multipart Uploader"), 1, PRE_CONFIG_INTERNET_ACCESS);
    CHttpConnection* pConnection = NULL;
    CHttpFile* pFile = NULL;

    try
    {
        // URLの解析
        CString strServerName, strObject;
        INTERNET_PORT nPort;
        DWORD dwServiceType;

        if (!AfxParseURL(strServerUrl, dwServiceType, strServerName, strObject, nPort) ||
            (dwServiceType != INTERNET_SERVICE_HTTP && dwServiceType != INTERNET_SERVICE_HTTPS))
        {
            AfxMessageBox(_T("無効なサーバーURLです。HTTPまたはHTTPSで始まる必要があります。"), MB_ICONERROR);
            return;
        }

        // 接続の確立
        pConnection = session.GetHttpConnection(strServerName, nPort);
        if (!pConnection)
        {
            AfxMessageBox(_T("サーバーへの接続に失敗しました。"), MB_ICONERROR);
            return;
        }

        // POSTリクエストを開く
        pFile = pConnection->OpenRequest(CHttpConnection::HTTP_VERB_POST, strObject, NULL, 1, NULL, NULL, INTERNET_FLAG_KEEP_CONNECTION | INTERNET_FLAG_RELOAD);
        if (!pFile)
        {
            AfxMessageBox(_T("HTTPリクエストのオープンに失敗しました。"), MB_ICONERROR);
            return;
        }

        // Boundary文字列の生成
        CString strBoundary = GenerateMultipartBoundary();

        // Content-Typeヘッダーの設定
        CString strHeaders;
        strHeaders.Format(_T("Content-Type: multipart/form-data; boundary=%s"), strBoundary);
        pFile->AddRequestHeaders(strHeaders);

        // -----------------------------------------------------
        // multipart/form-data ボディの構築と送信
        // -----------------------------------------------------

        // リクエスト送信の準備 (ボディのサイズを0にして、後からWriteで送信)
        // SendRequestEx()は、大きなデータストリームを送信する際に有効
        pFile->SendRequestEx(0, HSR_SYNC | HSR_INITIATE);

        // テキストフィールドパートの追加 (例: "message" フィールド)
        CString strMessageFieldName = _T("message");
        CString strMessageData = _T("これはMFCアプリケーションからのテストメッセージです。");
        CString strMessagePartHeader;
        strMessagePartHeader.Format(_T("--%s\r\nContent-Disposition: form-data; name=\"%s\"\r\n\r\n"), strBoundary, strMessageFieldName);

        pFile->Write((LPCTSTR)strMessagePartHeader, strMessagePartHeader.GetLength() * sizeof(TCHAR));
        pFile->Write((LPCTSTR)strMessageData, strMessageData.GetLength() * sizeof(TCHAR));
        pFile->Write((LPCVOID)"\r\n", 2); // パートデータの末尾に改行を追加

        // ファイルパートの追加 (例: "uploadedFile" フィールド)
        CFile fileToUpload;
        if (!fileToUpload.Open(strFilePath, CFile::modeRead | CFile::typeBinary | CFile::shareDenyNone))
        {
            AfxMessageBox(_T("指定されたファイルを開けませんでした。ファイルが存在するか、アクセス権を確認してください。"), MB_ICONERROR);
            return;
        }

        CString strFileName = fileToUpload.GetFileName(); // ファイル名を取得

        CString strFilePartHeader;
        strFilePartHeader.Format(_T("--%s\r\nContent-Disposition: form-data; name=\"uploadedFile\"; filename=\"%s\"\r\nContent-Type: application/octet-stream\r\n\r\n"),
                                 strBoundary, strFileName);

        pFile->Write((LPCTSTR)strFilePartHeader, strFilePartHeader.GetLength() * sizeof(TCHAR));

        // ファイルの内容を読み込み、少しずつ送信
        const int BUFFER_SIZE = 4096;
        BYTE buffer[BUFFER_SIZE];
        UINT bytesRead;
        while ((bytesRead = fileToUpload.Read(buffer, BUFFER_SIZE)) > 0)
        {
            pFile->Write(buffer, bytesRead);
        }
        fileToUpload.Close(); // ファイルを閉じる

        pFile->Write((LPCVOID)"\r\n", 2); // パートデータの末尾に改行を追加

        // 終端のboundaryを追加
        CString strEndBoundary;
        strEndBoundary.Format(_T("--%s--\r\n"), strBoundary);
        pFile->Write((LPCTSTR)strEndBoundary, strEndBoundary.GetLength() * sizeof(TCHAR));

        // リクエストボディの送信完了を通知
        pFile->EndRequest();

        // -----------------------------------------------------
        // レスポンスの受信と処理 (JSON解析を含む)
        // -----------------------------------------------------

        DWORD dwStatusCode = 0;
        pFile->QueryInfoStatusCode(dwStatusCode); // ステータスコードを取得

        CString strResponse;
        if (dwStatusCode == HTTP_STATUS_OK) // 200 OK
        {
            char szBuffer[1024];
            DWORD dwRead;
            // サーバーからのレスポンスを読み込む
            while (pFile->Read(szBuffer, sizeof(szBuffer) - 1, &dwRead) > 0)
            {
                szBuffer[dwRead] = '\0'; // ヌル終端
                strResponse += CString(szBuffer); // CStringに追加
            }
            
            // JSON解析の試行
            try
            {
                // CStringをstd::stringに変換
                std::string json_str;
#ifdef _UNICODE
                // Unicode (UTF-16) CString を UTF-8 std::string に変換
                int len = WideCharToMultiByte(CP_UTF8, 0, strResponse, -1, NULL, 0, NULL, NULL);
                if (len > 0) {
                    std::vector<char> buf(len);
                    WideCharToMultiByte(CP_UTF8, 0, strResponse, -1, buf.data(), len, NULL, NULL);
                    json_str.assign(buf.begin(), buf.end() -1); // 最後のnull終端を除去
                }
#else
                // MultiByte CString を std::string に直接変換
                json_str = strResponse;
#endif
                
                nlohmann::json json_data = nlohmann::json::parse(json_str);

                // JSONデータを整形して表示
                std::string pretty_json = json_data.dump(4); // インデント4で整形
                
                CString strDisplayResponse;
#ifdef _UNICODE
                // UTF-8 std::string を Unicode (UTF-16) CString に変換
                int len = MultiByteToWideChar(CP_UTF8, 0, pretty_json.c_str(), -1, NULL, 0);
                if (len > 0) {
                    std::vector<wchar_t> buf(len);
                    MultiByteToWideChar(CP_UTF8, 0, pretty_json.c_str(), -1, buf.data(), len);
                    strDisplayResponse = buf.data();
                } else {
                    strDisplayResponse = _T("JSON解析後、文字列変換に失敗しました。");
                }
#else
                strDisplayResponse = pretty_json.c_str();
#endif

                m_editResponse.SetWindowText(_T("アップロード成功！ステータスコード: ") + CString::Format(_T("%lu\r\n"), dwStatusCode) + _T("JSONレスポンス:\r\n") + strDisplayResponse);

            }
            catch (const nlohmann::json::parse_error& e)
            {
                // JSON解析エラー
                CString errorMsg;
                errorMsg.Format(_T("JSON解析エラー: %hs\r\n元のレスポンス:\r\n%s"), e.what(), strResponse);
                AfxMessageBox(errorMsg, MB_ICONWARNING);
                m_editResponse.SetWindowText(_T("アップロード成功 (しかしJSON解析エラー)！ステータスコード: ") + CString::Format(_T("%lu\r\n"), dwStatusCode) + _T("元のレスポンス:\r\n") + strResponse);
            }
            catch (const std::exception& e)
            {
                // その他の解析関連エラー
                CString errorMsg;
                errorMsg.Format(_T("レスポンス解析中にエラー: %hs\r\n元のレスポンス:\r\n%s"), e.what(), strResponse);
                AfxMessageBox(errorMsg, MB_ICONWARNING);
                m_editResponse.SetWindowText(_T("アップロード成功 (しかしレスポンス解析エラー)！ステータスコード: ") + CString::Format(_T("%lu\r\n"), dwStatusCode) + _T("元のレスポンス:\r\n") + strResponse);
            }
        }
        else
        {
            CString strErrorMsg;
            strErrorMsg.Format(_T("アップロード失敗！ステータスコード: %lu"), dwStatusCode);

            // エラーレスポンスボディも読み込める場合がある
            char szBuffer[1024];
            DWORD dwRead;
            CString strErrorBody;
            while (pFile->Read(szBuffer, sizeof(szBuffer) - 1, &dwRead) > 0)
            {
                szBuffer[dwRead] = '\0';
                strErrorBody += CString(szBuffer);
            }
            if (!strErrorBody.IsEmpty())
            {
                strErrorMsg += _T("\r\nレスポンスボディ:\r\n") + strErrorBody;
            }
            AfxMessageBox(strErrorMsg, MB_ICONERROR);
            m_editResponse.SetWindowText(strErrorMsg);
        }
    }
    catch (CInternetException* pEx)
    {
        TCHAR szError[256];
        pEx->GetErrorMessage(szError, sizeof(szError) / sizeof(TCHAR));
        CString strErrMsg;
        strErrMsg.Format(_T("インターネット例外が発生しました: %s (エラーコード: %lu)"), szError, pEx->m_dwError);
        AfxMessageBox(strErrMsg, MB_ICONERROR);
        m_editResponse.SetWindowText(strErrMsg);
        pEx->Delete(); // 例外オブジェクトを削除
    }
    catch (...) // その他の不明な例外
    {
        AfxMessageBox(_T("不明なエラーが発生しました。"), MB_ICONERROR);
        m_editResponse.SetWindowText(_T("不明なエラーが発生しました。"));
    }
    finally
    {
        // 使用したオブジェクトのクリーンアップ (必ず実行されるように)
        if (pFile)
        {
            pFile->Close();
            delete pFile;
            pFile = NULL;
        }
        if (pConnection)
        {
            pConnection->Close();
            delete pConnection;
            pConnection = NULL;
        }
        session.Close(); // セッションを閉じる
    }
}
